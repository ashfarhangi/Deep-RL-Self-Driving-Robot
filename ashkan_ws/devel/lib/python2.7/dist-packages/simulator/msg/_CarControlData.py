# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulator/CarControlData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarControlData(genpy.Message):
  _md5sum = "324d1d835c12674bf092534c6d2533e0"
  _type = "simulator/CarControlData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Constants from controlling the car via node

# cmd_vel
float64 cv_speed

float64 cv_turn_zero
float64 cv_turn_speed

# drive_pwm
int16 vp_speed

int16 vp_turn_zero
int16 vp_turn_speed

# VESC
float64 vesc_speed
"""
  __slots__ = ['cv_speed','cv_turn_zero','cv_turn_speed','vp_speed','vp_turn_zero','vp_turn_speed','vesc_speed']
  _slot_types = ['float64','float64','float64','int16','int16','int16','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cv_speed,cv_turn_zero,cv_turn_speed,vp_speed,vp_turn_zero,vp_turn_speed,vesc_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarControlData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cv_speed is None:
        self.cv_speed = 0.
      if self.cv_turn_zero is None:
        self.cv_turn_zero = 0.
      if self.cv_turn_speed is None:
        self.cv_turn_speed = 0.
      if self.vp_speed is None:
        self.vp_speed = 0
      if self.vp_turn_zero is None:
        self.vp_turn_zero = 0
      if self.vp_turn_speed is None:
        self.vp_turn_speed = 0
      if self.vesc_speed is None:
        self.vesc_speed = 0.
    else:
      self.cv_speed = 0.
      self.cv_turn_zero = 0.
      self.cv_turn_speed = 0.
      self.vp_speed = 0
      self.vp_turn_zero = 0
      self.vp_turn_speed = 0
      self.vesc_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3hd().pack(_x.cv_speed, _x.cv_turn_zero, _x.cv_turn_speed, _x.vp_speed, _x.vp_turn_zero, _x.vp_turn_speed, _x.vesc_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.cv_speed, _x.cv_turn_zero, _x.cv_turn_speed, _x.vp_speed, _x.vp_turn_zero, _x.vp_turn_speed, _x.vesc_speed,) = _get_struct_3d3hd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3hd().pack(_x.cv_speed, _x.cv_turn_zero, _x.cv_turn_speed, _x.vp_speed, _x.vp_turn_zero, _x.vp_turn_speed, _x.vesc_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.cv_speed, _x.cv_turn_zero, _x.cv_turn_speed, _x.vp_speed, _x.vp_turn_zero, _x.vp_turn_speed, _x.vesc_speed,) = _get_struct_3d3hd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3hd = None
def _get_struct_3d3hd():
    global _struct_3d3hd
    if _struct_3d3hd is None:
        _struct_3d3hd = struct.Struct("<3d3hd")
    return _struct_3d3hd
